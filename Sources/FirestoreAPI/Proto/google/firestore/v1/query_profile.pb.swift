// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/firestore/v1/query_profile.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Explain options for the query.
public struct Google_Firestore_V1_ExplainOptions: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Optional. Whether to execute this query.
  ///
  /// When false (the default), the query will be planned, returning only
  /// metrics from the planning stages.
  ///
  /// When true, the query will be planned and executed, returning the full
  /// query results along with both planning and execution stage metrics.
  public var analyze: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Explain metrics for the query.
public struct Google_Firestore_V1_ExplainMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Planning phase information for the query.
  public var planSummary: Google_Firestore_V1_PlanSummary {
    get {return _planSummary ?? Google_Firestore_V1_PlanSummary()}
    set {_planSummary = newValue}
  }
  /// Returns true if `planSummary` has been explicitly set.
  public var hasPlanSummary: Bool {return self._planSummary != nil}
  /// Clears the value of `planSummary`. Subsequent reads from it will return its default value.
  public mutating func clearPlanSummary() {self._planSummary = nil}

  /// Aggregated stats from the execution of the query. Only present when
  /// [ExplainOptions.analyze][google.firestore.v1.ExplainOptions.analyze] is set
  /// to true.
  public var executionStats: Google_Firestore_V1_ExecutionStats {
    get {return _executionStats ?? Google_Firestore_V1_ExecutionStats()}
    set {_executionStats = newValue}
  }
  /// Returns true if `executionStats` has been explicitly set.
  public var hasExecutionStats: Bool {return self._executionStats != nil}
  /// Clears the value of `executionStats`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionStats() {self._executionStats = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _planSummary: Google_Firestore_V1_PlanSummary? = nil
  fileprivate var _executionStats: Google_Firestore_V1_ExecutionStats? = nil
}

/// Planning phase information for the query.
public struct Google_Firestore_V1_PlanSummary: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The indexes selected for the query. For example:
  ///  [
  ///    {"query_scope": "Collection", "properties": "(foo ASC, __name__ ASC)"},
  ///    {"query_scope": "Collection", "properties": "(bar ASC, __name__ ASC)"}
  ///  ]
  public var indexesUsed: [SwiftProtobuf.Google_Protobuf_Struct] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Execution statistics for the query.
public struct Google_Firestore_V1_ExecutionStats: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total number of results returned, including documents, projections,
  /// aggregation results, keys.
  public var resultsReturned: Int64 = 0

  /// Total time to execute the query in the backend.
  public var executionDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _executionDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_executionDuration = newValue}
  }
  /// Returns true if `executionDuration` has been explicitly set.
  public var hasExecutionDuration: Bool {return self._executionDuration != nil}
  /// Clears the value of `executionDuration`. Subsequent reads from it will return its default value.
  public mutating func clearExecutionDuration() {self._executionDuration = nil}

  /// Total billable read operations.
  public var readOperations: Int64 = 0

  /// Debugging statistics from the execution of the query. Note that the
  /// debugging stats are subject to change as Firestore evolves. It could
  /// include:
  ///  {
  ///    "indexes_entries_scanned": "1000",
  ///    "documents_scanned": "20",
  ///    "billing_details" : {
  ///       "documents_billable": "20",
  ///       "index_entries_billable": "1000",
  ///       "min_query_cost": "0"
  ///    }
  ///  }
  public var debugStats: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _debugStats ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_debugStats = newValue}
  }
  /// Returns true if `debugStats` has been explicitly set.
  public var hasDebugStats: Bool {return self._debugStats != nil}
  /// Clears the value of `debugStats`. Subsequent reads from it will return its default value.
  public mutating func clearDebugStats() {self._debugStats = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _executionDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _debugStats: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.firestore.v1"

extension Google_Firestore_V1_ExplainOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExplainOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "analyze"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.analyze) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.analyze != false {
      try visitor.visitSingularBoolField(value: self.analyze, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_V1_ExplainOptions, rhs: Google_Firestore_V1_ExplainOptions) -> Bool {
    if lhs.analyze != rhs.analyze {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_V1_ExplainMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExplainMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plan_summary"),
    2: .standard(proto: "execution_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._planSummary) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._executionStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._planSummary {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._executionStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_V1_ExplainMetrics, rhs: Google_Firestore_V1_ExplainMetrics) -> Bool {
    if lhs._planSummary != rhs._planSummary {return false}
    if lhs._executionStats != rhs._executionStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_V1_PlanSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlanSummary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "indexes_used"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.indexesUsed) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.indexesUsed.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.indexesUsed, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_V1_PlanSummary, rhs: Google_Firestore_V1_PlanSummary) -> Bool {
    if lhs.indexesUsed != rhs.indexesUsed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Firestore_V1_ExecutionStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecutionStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "results_returned"),
    3: .standard(proto: "execution_duration"),
    4: .standard(proto: "read_operations"),
    5: .standard(proto: "debug_stats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.resultsReturned) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._executionDuration) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.readOperations) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._debugStats) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.resultsReturned != 0 {
      try visitor.visitSingularInt64Field(value: self.resultsReturned, fieldNumber: 1)
    }
    try { if let v = self._executionDuration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.readOperations != 0 {
      try visitor.visitSingularInt64Field(value: self.readOperations, fieldNumber: 4)
    }
    try { if let v = self._debugStats {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Firestore_V1_ExecutionStats, rhs: Google_Firestore_V1_ExecutionStats) -> Bool {
    if lhs.resultsReturned != rhs.resultsReturned {return false}
    if lhs._executionDuration != rhs._executionDuration {return false}
    if lhs.readOperations != rhs.readOperations {return false}
    if lhs._debugStats != rhs._debugStats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
