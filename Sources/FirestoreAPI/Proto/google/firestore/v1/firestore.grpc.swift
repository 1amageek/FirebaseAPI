// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/firestore/v1/firestore.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.firestore.v1.Firestore

/// Namespace containing generated types for the "google.firestore.v1.Firestore" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Google_Firestore_V1_Firestore {
    /// Service descriptor for the "google.firestore.v1.Firestore" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "GetDocument" metadata.
        public enum GetDocument {
            /// Request type for "GetDocument".
            public typealias Input = Google_Firestore_V1_GetDocumentRequest
            /// Response type for "GetDocument".
            public typealias Output = Google_Firestore_V1_Document
            /// Descriptor for "GetDocument".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "GetDocument"
            )
        }
        /// Namespace for "ListDocuments" metadata.
        public enum ListDocuments {
            /// Request type for "ListDocuments".
            public typealias Input = Google_Firestore_V1_ListDocumentsRequest
            /// Response type for "ListDocuments".
            public typealias Output = Google_Firestore_V1_ListDocumentsResponse
            /// Descriptor for "ListDocuments".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "ListDocuments"
            )
        }
        /// Namespace for "UpdateDocument" metadata.
        public enum UpdateDocument {
            /// Request type for "UpdateDocument".
            public typealias Input = Google_Firestore_V1_UpdateDocumentRequest
            /// Response type for "UpdateDocument".
            public typealias Output = Google_Firestore_V1_Document
            /// Descriptor for "UpdateDocument".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "UpdateDocument"
            )
        }
        /// Namespace for "DeleteDocument" metadata.
        public enum DeleteDocument {
            /// Request type for "DeleteDocument".
            public typealias Input = Google_Firestore_V1_DeleteDocumentRequest
            /// Response type for "DeleteDocument".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteDocument".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "DeleteDocument"
            )
        }
        /// Namespace for "BatchGetDocuments" metadata.
        public enum BatchGetDocuments {
            /// Request type for "BatchGetDocuments".
            public typealias Input = Google_Firestore_V1_BatchGetDocumentsRequest
            /// Response type for "BatchGetDocuments".
            public typealias Output = Google_Firestore_V1_BatchGetDocumentsResponse
            /// Descriptor for "BatchGetDocuments".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "BatchGetDocuments"
            )
        }
        /// Namespace for "BeginTransaction" metadata.
        public enum BeginTransaction {
            /// Request type for "BeginTransaction".
            public typealias Input = Google_Firestore_V1_BeginTransactionRequest
            /// Response type for "BeginTransaction".
            public typealias Output = Google_Firestore_V1_BeginTransactionResponse
            /// Descriptor for "BeginTransaction".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "BeginTransaction"
            )
        }
        /// Namespace for "Commit" metadata.
        public enum Commit {
            /// Request type for "Commit".
            public typealias Input = Google_Firestore_V1_CommitRequest
            /// Response type for "Commit".
            public typealias Output = Google_Firestore_V1_CommitResponse
            /// Descriptor for "Commit".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "Commit"
            )
        }
        /// Namespace for "Rollback" metadata.
        public enum Rollback {
            /// Request type for "Rollback".
            public typealias Input = Google_Firestore_V1_RollbackRequest
            /// Response type for "Rollback".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "Rollback".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "Rollback"
            )
        }
        /// Namespace for "RunQuery" metadata.
        public enum RunQuery {
            /// Request type for "RunQuery".
            public typealias Input = Google_Firestore_V1_RunQueryRequest
            /// Response type for "RunQuery".
            public typealias Output = Google_Firestore_V1_RunQueryResponse
            /// Descriptor for "RunQuery".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "RunQuery"
            )
        }
        /// Namespace for "RunAggregationQuery" metadata.
        public enum RunAggregationQuery {
            /// Request type for "RunAggregationQuery".
            public typealias Input = Google_Firestore_V1_RunAggregationQueryRequest
            /// Response type for "RunAggregationQuery".
            public typealias Output = Google_Firestore_V1_RunAggregationQueryResponse
            /// Descriptor for "RunAggregationQuery".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "RunAggregationQuery"
            )
        }
        /// Namespace for "PartitionQuery" metadata.
        public enum PartitionQuery {
            /// Request type for "PartitionQuery".
            public typealias Input = Google_Firestore_V1_PartitionQueryRequest
            /// Response type for "PartitionQuery".
            public typealias Output = Google_Firestore_V1_PartitionQueryResponse
            /// Descriptor for "PartitionQuery".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "PartitionQuery"
            )
        }
        /// Namespace for "Write" metadata.
        public enum Write {
            /// Request type for "Write".
            public typealias Input = Google_Firestore_V1_WriteRequest
            /// Response type for "Write".
            public typealias Output = Google_Firestore_V1_WriteResponse
            /// Descriptor for "Write".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "Write"
            )
        }
        /// Namespace for "Listen" metadata.
        public enum Listen {
            /// Request type for "Listen".
            public typealias Input = Google_Firestore_V1_ListenRequest
            /// Response type for "Listen".
            public typealias Output = Google_Firestore_V1_ListenResponse
            /// Descriptor for "Listen".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "Listen"
            )
        }
        /// Namespace for "ListCollectionIds" metadata.
        public enum ListCollectionIds {
            /// Request type for "ListCollectionIds".
            public typealias Input = Google_Firestore_V1_ListCollectionIdsRequest
            /// Response type for "ListCollectionIds".
            public typealias Output = Google_Firestore_V1_ListCollectionIdsResponse
            /// Descriptor for "ListCollectionIds".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "ListCollectionIds"
            )
        }
        /// Namespace for "BatchWrite" metadata.
        public enum BatchWrite {
            /// Request type for "BatchWrite".
            public typealias Input = Google_Firestore_V1_BatchWriteRequest
            /// Response type for "BatchWrite".
            public typealias Output = Google_Firestore_V1_BatchWriteResponse
            /// Descriptor for "BatchWrite".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "BatchWrite"
            )
        }
        /// Namespace for "CreateDocument" metadata.
        public enum CreateDocument {
            /// Request type for "CreateDocument".
            public typealias Input = Google_Firestore_V1_CreateDocumentRequest
            /// Response type for "CreateDocument".
            public typealias Output = Google_Firestore_V1_Document
            /// Descriptor for "CreateDocument".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore"),
                method: "CreateDocument"
            )
        }
        /// Descriptors for all methods in the "google.firestore.v1.Firestore" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            GetDocument.descriptor,
            ListDocuments.descriptor,
            UpdateDocument.descriptor,
            DeleteDocument.descriptor,
            BatchGetDocuments.descriptor,
            BeginTransaction.descriptor,
            Commit.descriptor,
            Rollback.descriptor,
            RunQuery.descriptor,
            RunAggregationQuery.descriptor,
            PartitionQuery.descriptor,
            Write.descriptor,
            Listen.descriptor,
            ListCollectionIds.descriptor,
            BatchWrite.descriptor,
            CreateDocument.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.firestore.v1.Firestore" service.
    public static let google_firestore_v1_Firestore = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.firestore.v1.Firestore")
}

// MARK: google.firestore.v1.Firestore (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore {
    /// Streaming variant of the service protocol for the "google.firestore.v1.Firestore" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The Cloud Firestore service.
    /// > 
    /// > Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
    /// > document database that simplifies storing, syncing, and querying data for
    /// > your mobile, web, and IoT apps at global scale. Its client libraries provide
    /// > live synchronization and offline support, while its security features and
    /// > integrations with Firebase and Google Cloud Platform accelerate building
    /// > truly serverless apps.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "GetDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a single document.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_GetDocumentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_Document` messages.
        func getDocument(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_GetDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_Document>

        /// Handle the "ListDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists documents.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_ListDocumentsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_ListDocumentsResponse` messages.
        func listDocuments(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListDocumentsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListDocumentsResponse>

        /// Handle the "UpdateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates or inserts a document.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_UpdateDocumentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_Document` messages.
        func updateDocument(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_UpdateDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_Document>

        /// Handle the "DeleteDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a document.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_DeleteDocumentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func deleteDocument(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_DeleteDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "BatchGetDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets multiple documents.
        /// > 
        /// > Documents returned by this method are not guaranteed to be returned in the
        /// > same order that they were requested.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_BatchGetDocumentsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_BatchGetDocumentsResponse` messages.
        func batchGetDocuments(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchGetDocumentsResponse>

        /// Handle the "BeginTransaction" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new transaction.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_BeginTransactionRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_BeginTransactionResponse` messages.
        func beginTransaction(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_BeginTransactionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BeginTransactionResponse>

        /// Handle the "Commit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Commits a transaction, while optionally updating documents.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_CommitRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_CommitResponse` messages.
        func commit(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_CommitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_CommitResponse>

        /// Handle the "Rollback" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rolls back a transaction.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_RollbackRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func rollback(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_RollbackRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "RunQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a query.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_RunQueryRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_RunQueryResponse` messages.
        func runQuery(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_RunQueryRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunQueryResponse>

        /// Handle the "RunAggregationQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs an aggregation query.
        /// > 
        /// > Rather than producing [Document][google.firestore.v1.Document] results like
        /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
        /// > allows running an aggregation to produce a series of
        /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
        /// > 
        /// > High-Level Example:
        /// > 
        /// > ```
        /// > -- Return the number of documents in table given a filter.
        /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
        /// > ```
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_RunAggregationQueryRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_RunAggregationQueryResponse` messages.
        func runAggregationQuery(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunAggregationQueryResponse>

        /// Handle the "PartitionQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Partitions a query by returning partition cursors that can be used to run
        /// > the query in parallel. The returned partition cursors are split points that
        /// > can be used by RunQuery as starting/end points for the query results.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_PartitionQueryRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_PartitionQueryResponse` messages.
        func partitionQuery(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_PartitionQueryRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_PartitionQueryResponse>

        /// Handle the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Streams batches of document updates and deletes, in order. This method is
        /// > only available via gRPC or WebChannel (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_WriteRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_WriteResponse` messages.
        func write(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_WriteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_WriteResponse>

        /// Handle the "Listen" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Listens to changes. This method is only available via gRPC or WebChannel
        /// > (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_ListenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_ListenResponse` messages.
        func listen(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListenResponse>

        /// Handle the "ListCollectionIds" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the collection IDs underneath a document.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_ListCollectionIdsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_ListCollectionIdsResponse` messages.
        func listCollectionIds(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListCollectionIdsResponse>

        /// Handle the "BatchWrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Applies a batch of write operations.
        /// > 
        /// > The BatchWrite method does not apply the write operations atomically
        /// > and can apply them out of order. Method does not allow more than one write
        /// > per document. Each write succeeds or fails independently. See the
        /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
        /// > success status of each write.
        /// > 
        /// > If you require an atomically applied set of writes, use
        /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_BatchWriteRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_BatchWriteResponse` messages.
        func batchWrite(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_BatchWriteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchWriteResponse>

        /// Handle the "CreateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new document.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_CreateDocumentRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_Document` messages.
        func createDocument(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_CreateDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_Document>
    }

    /// Service protocol for the "google.firestore.v1.Firestore" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The Cloud Firestore service.
    /// > 
    /// > Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
    /// > document database that simplifies storing, syncing, and querying data for
    /// > your mobile, web, and IoT apps at global scale. Its client libraries provide
    /// > live synchronization and offline support, while its security features and
    /// > integrations with Firebase and Google Cloud Platform accelerate building
    /// > truly serverless apps.
    public protocol ServiceProtocol: Google_Firestore_V1_Firestore.StreamingServiceProtocol {
        /// Handle the "GetDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a single document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_GetDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_Document` message.
        func getDocument(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_GetDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_Document>

        /// Handle the "ListDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists documents.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_ListDocumentsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_ListDocumentsResponse` message.
        func listDocuments(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_ListDocumentsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_ListDocumentsResponse>

        /// Handle the "UpdateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates or inserts a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_UpdateDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_Document` message.
        func updateDocument(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_UpdateDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_Document>

        /// Handle the "DeleteDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_DeleteDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func deleteDocument(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_DeleteDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "BatchGetDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets multiple documents.
        /// > 
        /// > Documents returned by this method are not guaranteed to be returned in the
        /// > same order that they were requested.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BatchGetDocumentsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_BatchGetDocumentsResponse` messages.
        func batchGetDocuments(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchGetDocumentsResponse>

        /// Handle the "BeginTransaction" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BeginTransactionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_BeginTransactionResponse` message.
        func beginTransaction(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_BeginTransactionRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_BeginTransactionResponse>

        /// Handle the "Commit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Commits a transaction, while optionally updating documents.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_CommitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_CommitResponse` message.
        func commit(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_CommitRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_CommitResponse>

        /// Handle the "Rollback" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rolls back a transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RollbackRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func rollback(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_RollbackRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "RunQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a query.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RunQueryRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_RunQueryResponse` messages.
        func runQuery(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_RunQueryRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunQueryResponse>

        /// Handle the "RunAggregationQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs an aggregation query.
        /// > 
        /// > Rather than producing [Document][google.firestore.v1.Document] results like
        /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
        /// > allows running an aggregation to produce a series of
        /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
        /// > 
        /// > High-Level Example:
        /// > 
        /// > ```
        /// > -- Return the number of documents in table given a filter.
        /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
        /// > ```
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RunAggregationQueryRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_RunAggregationQueryResponse` messages.
        func runAggregationQuery(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunAggregationQueryResponse>

        /// Handle the "PartitionQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Partitions a query by returning partition cursors that can be used to run
        /// > the query in parallel. The returned partition cursors are split points that
        /// > can be used by RunQuery as starting/end points for the query results.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_PartitionQueryRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_PartitionQueryResponse` message.
        func partitionQuery(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_PartitionQueryRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_PartitionQueryResponse>

        /// Handle the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Streams batches of document updates and deletes, in order. This method is
        /// > only available via gRPC or WebChannel (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_WriteRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_WriteResponse` messages.
        func write(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_WriteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_WriteResponse>

        /// Handle the "Listen" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Listens to changes. This method is only available via gRPC or WebChannel
        /// > (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Firestore_V1_ListenRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Firestore_V1_ListenResponse` messages.
        func listen(
            request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListenRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListenResponse>

        /// Handle the "ListCollectionIds" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the collection IDs underneath a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_ListCollectionIdsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_ListCollectionIdsResponse` message.
        func listCollectionIds(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_ListCollectionIdsResponse>

        /// Handle the "BatchWrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Applies a batch of write operations.
        /// > 
        /// > The BatchWrite method does not apply the write operations atomically
        /// > and can apply them out of order. Method does not allow more than one write
        /// > per document. Each write succeeds or fails independently. See the
        /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
        /// > success status of each write.
        /// > 
        /// > If you require an atomically applied set of writes, use
        /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BatchWriteRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_BatchWriteResponse` message.
        func batchWrite(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_BatchWriteRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_BatchWriteResponse>

        /// Handle the "CreateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_CreateDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Firestore_V1_Document` message.
        func createDocument(
            request: GRPCCore.ServerRequest<Google_Firestore_V1_CreateDocumentRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_Document>
    }

    /// Simple service protocol for the "google.firestore.v1.Firestore" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The Cloud Firestore service.
    /// > 
    /// > Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
    /// > document database that simplifies storing, syncing, and querying data for
    /// > your mobile, web, and IoT apps at global scale. Its client libraries provide
    /// > live synchronization and offline support, while its security features and
    /// > integrations with Firebase and Google Cloud Platform accelerate building
    /// > truly serverless apps.
    public protocol SimpleServiceProtocol: Google_Firestore_V1_Firestore.ServiceProtocol {
        /// Handle the "GetDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a single document.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_GetDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_Document` to respond with.
        func getDocument(
            request: Google_Firestore_V1_GetDocumentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_Document

        /// Handle the "ListDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists documents.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_ListDocumentsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_ListDocumentsResponse` to respond with.
        func listDocuments(
            request: Google_Firestore_V1_ListDocumentsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_ListDocumentsResponse

        /// Handle the "UpdateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates or inserts a document.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_UpdateDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_Document` to respond with.
        func updateDocument(
            request: Google_Firestore_V1_UpdateDocumentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_Document

        /// Handle the "DeleteDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a document.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_DeleteDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func deleteDocument(
            request: Google_Firestore_V1_DeleteDocumentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "BatchGetDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets multiple documents.
        /// > 
        /// > Documents returned by this method are not guaranteed to be returned in the
        /// > same order that they were requested.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_BatchGetDocumentsRequest` message.
        ///   - response: A response stream of `Google_Firestore_V1_BatchGetDocumentsResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func batchGetDocuments(
            request: Google_Firestore_V1_BatchGetDocumentsRequest,
            response: GRPCCore.RPCWriter<Google_Firestore_V1_BatchGetDocumentsResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "BeginTransaction" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new transaction.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_BeginTransactionRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_BeginTransactionResponse` to respond with.
        func beginTransaction(
            request: Google_Firestore_V1_BeginTransactionRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_BeginTransactionResponse

        /// Handle the "Commit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Commits a transaction, while optionally updating documents.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_CommitRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_CommitResponse` to respond with.
        func commit(
            request: Google_Firestore_V1_CommitRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_CommitResponse

        /// Handle the "Rollback" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rolls back a transaction.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_RollbackRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func rollback(
            request: Google_Firestore_V1_RollbackRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "RunQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a query.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_RunQueryRequest` message.
        ///   - response: A response stream of `Google_Firestore_V1_RunQueryResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func runQuery(
            request: Google_Firestore_V1_RunQueryRequest,
            response: GRPCCore.RPCWriter<Google_Firestore_V1_RunQueryResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "RunAggregationQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs an aggregation query.
        /// > 
        /// > Rather than producing [Document][google.firestore.v1.Document] results like
        /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
        /// > allows running an aggregation to produce a series of
        /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
        /// > 
        /// > High-Level Example:
        /// > 
        /// > ```
        /// > -- Return the number of documents in table given a filter.
        /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
        /// > ```
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_RunAggregationQueryRequest` message.
        ///   - response: A response stream of `Google_Firestore_V1_RunAggregationQueryResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func runAggregationQuery(
            request: Google_Firestore_V1_RunAggregationQueryRequest,
            response: GRPCCore.RPCWriter<Google_Firestore_V1_RunAggregationQueryResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "PartitionQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Partitions a query by returning partition cursors that can be used to run
        /// > the query in parallel. The returned partition cursors are split points that
        /// > can be used by RunQuery as starting/end points for the query results.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_PartitionQueryRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_PartitionQueryResponse` to respond with.
        func partitionQuery(
            request: Google_Firestore_V1_PartitionQueryRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_PartitionQueryResponse

        /// Handle the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Streams batches of document updates and deletes, in order. This method is
        /// > only available via gRPC or WebChannel (not REST).
        ///
        /// - Parameters:
        ///   - request: A stream of `Google_Firestore_V1_WriteRequest` messages.
        ///   - response: A response stream of `Google_Firestore_V1_WriteResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func write(
            request: GRPCCore.RPCAsyncSequence<Google_Firestore_V1_WriteRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Google_Firestore_V1_WriteResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "Listen" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Listens to changes. This method is only available via gRPC or WebChannel
        /// > (not REST).
        ///
        /// - Parameters:
        ///   - request: A stream of `Google_Firestore_V1_ListenRequest` messages.
        ///   - response: A response stream of `Google_Firestore_V1_ListenResponse` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func listen(
            request: GRPCCore.RPCAsyncSequence<Google_Firestore_V1_ListenRequest, any Swift.Error>,
            response: GRPCCore.RPCWriter<Google_Firestore_V1_ListenResponse>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "ListCollectionIds" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the collection IDs underneath a document.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_ListCollectionIdsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_ListCollectionIdsResponse` to respond with.
        func listCollectionIds(
            request: Google_Firestore_V1_ListCollectionIdsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_ListCollectionIdsResponse

        /// Handle the "BatchWrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Applies a batch of write operations.
        /// > 
        /// > The BatchWrite method does not apply the write operations atomically
        /// > and can apply them out of order. Method does not allow more than one write
        /// > per document. Each write succeeds or fails independently. See the
        /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
        /// > success status of each write.
        /// > 
        /// > If you require an atomically applied set of writes, use
        /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_BatchWriteRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_BatchWriteResponse` to respond with.
        func batchWrite(
            request: Google_Firestore_V1_BatchWriteRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_BatchWriteResponse

        /// Handle the "CreateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new document.
        ///
        /// - Parameters:
        ///   - request: A `Google_Firestore_V1_CreateDocumentRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Firestore_V1_Document` to respond with.
        func createDocument(
            request: Google_Firestore_V1_CreateDocumentRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Firestore_V1_Document
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.GetDocument.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_GetDocumentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_Document>(),
            handler: { request, context in
                try await self.getDocument(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.ListDocuments.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_ListDocumentsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_ListDocumentsResponse>(),
            handler: { request, context in
                try await self.listDocuments(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.UpdateDocument.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_UpdateDocumentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_Document>(),
            handler: { request, context in
                try await self.updateDocument(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.DeleteDocument.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_DeleteDocumentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.deleteDocument(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.BatchGetDocuments.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_BatchGetDocumentsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_BatchGetDocumentsResponse>(),
            handler: { request, context in
                try await self.batchGetDocuments(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.BeginTransaction.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_BeginTransactionRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_BeginTransactionResponse>(),
            handler: { request, context in
                try await self.beginTransaction(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.Commit.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_CommitRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_CommitResponse>(),
            handler: { request, context in
                try await self.commit(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.Rollback.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_RollbackRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.rollback(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.RunQuery.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_RunQueryRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_RunQueryResponse>(),
            handler: { request, context in
                try await self.runQuery(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.RunAggregationQuery.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_RunAggregationQueryRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_RunAggregationQueryResponse>(),
            handler: { request, context in
                try await self.runAggregationQuery(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.PartitionQuery.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_PartitionQueryRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_PartitionQueryResponse>(),
            handler: { request, context in
                try await self.partitionQuery(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.Write.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_WriteRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_WriteResponse>(),
            handler: { request, context in
                try await self.write(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.Listen.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_ListenRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_ListenResponse>(),
            handler: { request, context in
                try await self.listen(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.ListCollectionIds.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_ListCollectionIdsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_ListCollectionIdsResponse>(),
            handler: { request, context in
                try await self.listCollectionIds(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.BatchWrite.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_BatchWriteRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_BatchWriteResponse>(),
            handler: { request, context in
                try await self.batchWrite(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Firestore_V1_Firestore.Method.CreateDocument.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_CreateDocumentRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_Document>(),
            handler: { request, context in
                try await self.createDocument(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore.ServiceProtocol {
    public func getDocument(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_GetDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_Document> {
        let response = try await self.getDocument(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listDocuments(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListDocumentsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListDocumentsResponse> {
        let response = try await self.listDocuments(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func updateDocument(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_UpdateDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_Document> {
        let response = try await self.updateDocument(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteDocument(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_DeleteDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.deleteDocument(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func batchGetDocuments(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchGetDocumentsResponse> {
        let response = try await self.batchGetDocuments(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func beginTransaction(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_BeginTransactionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BeginTransactionResponse> {
        let response = try await self.beginTransaction(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func commit(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_CommitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_CommitResponse> {
        let response = try await self.commit(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func rollback(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_RollbackRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.rollback(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func runQuery(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_RunQueryRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunQueryResponse> {
        let response = try await self.runQuery(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func runAggregationQuery(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunAggregationQueryResponse> {
        let response = try await self.runAggregationQuery(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return response
    }

    public func partitionQuery(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_PartitionQueryRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_PartitionQueryResponse> {
        let response = try await self.partitionQuery(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func listCollectionIds(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListCollectionIdsResponse> {
        let response = try await self.listCollectionIds(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func batchWrite(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_BatchWriteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchWriteResponse> {
        let response = try await self.batchWrite(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func createDocument(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_CreateDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_Document> {
        let response = try await self.createDocument(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore.SimpleServiceProtocol {
    public func getDocument(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_GetDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_Document> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_Document>(
            message: try await self.getDocument(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func listDocuments(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_ListDocumentsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_ListDocumentsResponse> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_ListDocumentsResponse>(
            message: try await self.listDocuments(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func updateDocument(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_UpdateDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_Document> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_Document>(
            message: try await self.updateDocument(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteDocument(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_DeleteDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.deleteDocument(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func batchGetDocuments(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchGetDocumentsResponse> {
        return GRPCCore.StreamingServerResponse<Google_Firestore_V1_BatchGetDocumentsResponse>(
            metadata: [:],
            producer: { writer in
                try await self.batchGetDocuments(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func beginTransaction(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_BeginTransactionRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_BeginTransactionResponse> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_BeginTransactionResponse>(
            message: try await self.beginTransaction(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func commit(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_CommitRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_CommitResponse> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_CommitResponse>(
            message: try await self.commit(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func rollback(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_RollbackRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.rollback(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func runQuery(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_RunQueryRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunQueryResponse> {
        return GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunQueryResponse>(
            metadata: [:],
            producer: { writer in
                try await self.runQuery(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func runAggregationQuery(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunAggregationQueryResponse> {
        return GRPCCore.StreamingServerResponse<Google_Firestore_V1_RunAggregationQueryResponse>(
            metadata: [:],
            producer: { writer in
                try await self.runAggregationQuery(
                    request: request.message,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func partitionQuery(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_PartitionQueryRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_PartitionQueryResponse> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_PartitionQueryResponse>(
            message: try await self.partitionQuery(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func write(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_WriteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_WriteResponse> {
        return GRPCCore.StreamingServerResponse<Google_Firestore_V1_WriteResponse>(
            metadata: [:],
            producer: { writer in
                try await self.write(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func listen(
        request: GRPCCore.StreamingServerRequest<Google_Firestore_V1_ListenRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListenResponse> {
        return GRPCCore.StreamingServerResponse<Google_Firestore_V1_ListenResponse>(
            metadata: [:],
            producer: { writer in
                try await self.listen(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func listCollectionIds(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_ListCollectionIdsResponse> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_ListCollectionIdsResponse>(
            message: try await self.listCollectionIds(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func batchWrite(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_BatchWriteRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_BatchWriteResponse> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_BatchWriteResponse>(
            message: try await self.batchWrite(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func createDocument(
        request: GRPCCore.ServerRequest<Google_Firestore_V1_CreateDocumentRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Firestore_V1_Document> {
        return GRPCCore.ServerResponse<Google_Firestore_V1_Document>(
            message: try await self.createDocument(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: google.firestore.v1.Firestore (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore {
    /// Generated client protocol for the "google.firestore.v1.Firestore" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The Cloud Firestore service.
    /// > 
    /// > Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
    /// > document database that simplifies storing, syncing, and querying data for
    /// > your mobile, web, and IoT apps at global scale. Its client libraries provide
    /// > live synchronization and offline support, while its security features and
    /// > integrations with Firebase and Google Cloud Platform accelerate building
    /// > truly serverless apps.
    public protocol ClientProtocol: Sendable {
        /// Call the "GetDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a single document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_GetDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_GetDocumentRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_Document` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_GetDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_GetDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_Document>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists documents.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_ListDocumentsRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_ListDocumentsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_ListDocumentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listDocuments<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_ListDocumentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_ListDocumentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_ListDocumentsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListDocumentsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "UpdateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates or inserts a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_UpdateDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_UpdateDocumentRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_Document` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func updateDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_UpdateDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_UpdateDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_Document>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_DeleteDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_DeleteDocumentRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_DeleteDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_DeleteDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "BatchGetDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets multiple documents.
        /// > 
        /// > Documents returned by this method are not guaranteed to be returned in the
        /// > same order that they were requested.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BatchGetDocumentsRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_BatchGetDocumentsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_BatchGetDocumentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func batchGetDocuments<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_BatchGetDocumentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_BatchGetDocumentsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_BatchGetDocumentsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "BeginTransaction" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BeginTransactionRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_BeginTransactionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_BeginTransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func beginTransaction<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_BeginTransactionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_BeginTransactionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_BeginTransactionResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BeginTransactionResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Commit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Commits a transaction, while optionally updating documents.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_CommitRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_CommitRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_CommitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func commit<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_CommitRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_CommitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_CommitResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_CommitResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Rollback" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rolls back a transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RollbackRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_RollbackRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func rollback<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_RollbackRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_RollbackRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RunQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a query.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RunQueryRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_RunQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_RunQueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func runQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_RunQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_RunQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_RunQueryResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunQueryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "RunAggregationQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs an aggregation query.
        /// > 
        /// > Rather than producing [Document][google.firestore.v1.Document] results like
        /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
        /// > allows running an aggregation to produce a series of
        /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
        /// > 
        /// > High-Level Example:
        /// > 
        /// > ```
        /// > -- Return the number of documents in table given a filter.
        /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
        /// > ```
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RunAggregationQueryRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_RunAggregationQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_RunAggregationQueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func runAggregationQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_RunAggregationQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_RunAggregationQueryResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunAggregationQueryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "PartitionQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Partitions a query by returning partition cursors that can be used to run
        /// > the query in parallel. The returned partition cursors are split points that
        /// > can be used by RunQuery as starting/end points for the query results.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_PartitionQueryRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_PartitionQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_PartitionQueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func partitionQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_PartitionQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_PartitionQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_PartitionQueryResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_PartitionQueryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Streams batches of document updates and deletes, in order. This method is
        /// > only available via gRPC or WebChannel (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Google_Firestore_V1_WriteRequest` messages.
        ///   - serializer: A serializer for `Google_Firestore_V1_WriteRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_WriteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func write<Result>(
            request: GRPCCore.StreamingClientRequest<Google_Firestore_V1_WriteRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_WriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_WriteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_WriteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "Listen" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Listens to changes. This method is only available via gRPC or WebChannel
        /// > (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Google_Firestore_V1_ListenRequest` messages.
        ///   - serializer: A serializer for `Google_Firestore_V1_ListenRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_ListenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listen<Result>(
            request: GRPCCore.StreamingClientRequest<Google_Firestore_V1_ListenRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_ListenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_ListenResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_ListenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "ListCollectionIds" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the collection IDs underneath a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_ListCollectionIdsRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_ListCollectionIdsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_ListCollectionIdsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listCollectionIds<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_ListCollectionIdsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_ListCollectionIdsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListCollectionIdsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "BatchWrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Applies a batch of write operations.
        /// > 
        /// > The BatchWrite method does not apply the write operations atomically
        /// > and can apply them out of order. Method does not allow more than one write
        /// > per document. Each write succeeds or fails independently. See the
        /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
        /// > success status of each write.
        /// > 
        /// > If you require an atomically applied set of writes, use
        /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BatchWriteRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_BatchWriteRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_BatchWriteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func batchWrite<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_BatchWriteRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_BatchWriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_BatchWriteResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BatchWriteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CreateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_CreateDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_CreateDocumentRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_Document` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func createDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_CreateDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_CreateDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_Document>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.firestore.v1.Firestore" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > The Cloud Firestore service.
    /// > 
    /// > Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
    /// > document database that simplifies storing, syncing, and querying data for
    /// > your mobile, web, and IoT apps at global scale. Its client libraries provide
    /// > live synchronization and offline support, while its security features and
    /// > integrations with Firebase and Google Cloud Platform accelerate building
    /// > truly serverless apps.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "GetDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets a single document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_GetDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_GetDocumentRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_Document` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_GetDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_GetDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_Document>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.GetDocument.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists documents.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_ListDocumentsRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_ListDocumentsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_ListDocumentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listDocuments<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_ListDocumentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_ListDocumentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_ListDocumentsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListDocumentsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.ListDocuments.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "UpdateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Updates or inserts a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_UpdateDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_UpdateDocumentRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_Document` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func updateDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_UpdateDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_UpdateDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_Document>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.UpdateDocument.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_DeleteDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_DeleteDocumentRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_DeleteDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_DeleteDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.DeleteDocument.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "BatchGetDocuments" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets multiple documents.
        /// > 
        /// > Documents returned by this method are not guaranteed to be returned in the
        /// > same order that they were requested.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BatchGetDocumentsRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_BatchGetDocumentsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_BatchGetDocumentsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func batchGetDocuments<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_BatchGetDocumentsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_BatchGetDocumentsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_BatchGetDocumentsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.BatchGetDocuments.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "BeginTransaction" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts a new transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BeginTransactionRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_BeginTransactionRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_BeginTransactionResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func beginTransaction<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_BeginTransactionRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_BeginTransactionRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_BeginTransactionResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BeginTransactionResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.BeginTransaction.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Commit" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Commits a transaction, while optionally updating documents.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_CommitRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_CommitRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_CommitResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func commit<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_CommitRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_CommitRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_CommitResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_CommitResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.Commit.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Rollback" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Rolls back a transaction.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RollbackRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_RollbackRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func rollback<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_RollbackRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_RollbackRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.Rollback.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RunQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs a query.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RunQueryRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_RunQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_RunQueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func runQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_RunQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_RunQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_RunQueryResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunQueryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.RunQuery.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "RunAggregationQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Runs an aggregation query.
        /// > 
        /// > Rather than producing [Document][google.firestore.v1.Document] results like
        /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
        /// > allows running an aggregation to produce a series of
        /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
        /// > 
        /// > High-Level Example:
        /// > 
        /// > ```
        /// > -- Return the number of documents in table given a filter.
        /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
        /// > ```
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_RunAggregationQueryRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_RunAggregationQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_RunAggregationQueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func runAggregationQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_RunAggregationQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_RunAggregationQueryResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunAggregationQueryResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.serverStreaming(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.RunAggregationQuery.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "PartitionQuery" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Partitions a query by returning partition cursors that can be used to run
        /// > the query in parallel. The returned partition cursors are split points that
        /// > can be used by RunQuery as starting/end points for the query results.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_PartitionQueryRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_PartitionQueryRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_PartitionQueryResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func partitionQuery<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_PartitionQueryRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_PartitionQueryRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_PartitionQueryResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_PartitionQueryResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.PartitionQuery.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Write" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Streams batches of document updates and deletes, in order. This method is
        /// > only available via gRPC or WebChannel (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Google_Firestore_V1_WriteRequest` messages.
        ///   - serializer: A serializer for `Google_Firestore_V1_WriteRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_WriteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func write<Result>(
            request: GRPCCore.StreamingClientRequest<Google_Firestore_V1_WriteRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_WriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_WriteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_WriteResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.Write.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "Listen" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Listens to changes. This method is only available via gRPC or WebChannel
        /// > (not REST).
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Google_Firestore_V1_ListenRequest` messages.
        ///   - serializer: A serializer for `Google_Firestore_V1_ListenRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_ListenResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listen<Result>(
            request: GRPCCore.StreamingClientRequest<Google_Firestore_V1_ListenRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_ListenRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_ListenResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_ListenResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.Listen.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "ListCollectionIds" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists all the collection IDs underneath a document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_ListCollectionIdsRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_ListCollectionIdsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_ListCollectionIdsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listCollectionIds<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_ListCollectionIdsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_ListCollectionIdsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListCollectionIdsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.ListCollectionIds.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "BatchWrite" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Applies a batch of write operations.
        /// > 
        /// > The BatchWrite method does not apply the write operations atomically
        /// > and can apply them out of order. Method does not allow more than one write
        /// > per document. Each write succeeds or fails independently. See the
        /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
        /// > success status of each write.
        /// > 
        /// > If you require an atomically applied set of writes, use
        /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_BatchWriteRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_BatchWriteRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_BatchWriteResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func batchWrite<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_BatchWriteRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_BatchWriteRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_BatchWriteResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BatchWriteResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.BatchWrite.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CreateDocument" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Creates a new document.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Firestore_V1_CreateDocumentRequest` message.
        ///   - serializer: A serializer for `Google_Firestore_V1_CreateDocumentRequest` messages.
        ///   - deserializer: A deserializer for `Google_Firestore_V1_Document` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func createDocument<Result>(
            request: GRPCCore.ClientRequest<Google_Firestore_V1_CreateDocumentRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Firestore_V1_CreateDocumentRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Firestore_V1_Document>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Firestore_V1_Firestore.Method.CreateDocument.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore.ClientProtocol {
    /// Call the "GetDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a single document.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_GetDocumentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDocument<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_GetDocumentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getDocument(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_GetDocumentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_Document>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDocuments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists documents.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_ListDocumentsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDocuments<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_ListDocumentsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListDocumentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listDocuments(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_ListDocumentsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_ListDocumentsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates or inserts a document.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_UpdateDocumentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDocument<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_UpdateDocumentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.updateDocument(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_UpdateDocumentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_Document>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a document.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_DeleteDocumentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteDocument<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_DeleteDocumentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteDocument(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_DeleteDocumentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BatchGetDocuments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets multiple documents.
    /// > 
    /// > Documents returned by this method are not guaranteed to be returned in the
    /// > same order that they were requested.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_BatchGetDocumentsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func batchGetDocuments<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_BatchGetDocumentsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_BatchGetDocumentsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.batchGetDocuments(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_BatchGetDocumentsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_BatchGetDocumentsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BeginTransaction" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts a new transaction.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_BeginTransactionRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func beginTransaction<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_BeginTransactionRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BeginTransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.beginTransaction(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_BeginTransactionRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_BeginTransactionResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Commit" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Commits a transaction, while optionally updating documents.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_CommitRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func commit<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_CommitRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_CommitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.commit(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_CommitRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_CommitResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Rollback" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Rolls back a transaction.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_RollbackRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func rollback<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_RollbackRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.rollback(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_RollbackRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Runs a query.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_RunQueryRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runQuery<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_RunQueryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunQueryResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.runQuery(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_RunQueryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_RunQueryResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunAggregationQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Runs an aggregation query.
    /// > 
    /// > Rather than producing [Document][google.firestore.v1.Document] results like
    /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
    /// > allows running an aggregation to produce a series of
    /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
    /// > 
    /// > High-Level Example:
    /// > 
    /// > ```
    /// > -- Return the number of documents in table given a filter.
    /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
    /// > ```
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_RunAggregationQueryRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runAggregationQuery<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_RunAggregationQueryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunAggregationQueryResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.runAggregationQuery(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_RunAggregationQueryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_RunAggregationQueryResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PartitionQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Partitions a query by returning partition cursors that can be used to run
    /// > the query in parallel. The returned partition cursors are split points that
    /// > can be used by RunQuery as starting/end points for the query results.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_PartitionQueryRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func partitionQuery<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_PartitionQueryRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_PartitionQueryResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.partitionQuery(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_PartitionQueryRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_PartitionQueryResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Write" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Streams batches of document updates and deletes, in order. This method is
    /// > only available via gRPC or WebChannel (not REST).
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Google_Firestore_V1_WriteRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func write<Result>(
        request: GRPCCore.StreamingClientRequest<Google_Firestore_V1_WriteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_WriteResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.write(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_WriteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_WriteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Listen" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Listens to changes. This method is only available via gRPC or WebChannel
    /// > (not REST).
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Google_Firestore_V1_ListenRequest` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listen<Result>(
        request: GRPCCore.StreamingClientRequest<Google_Firestore_V1_ListenRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_ListenResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.listen(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_ListenRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_ListenResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListCollectionIds" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all the collection IDs underneath a document.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_ListCollectionIdsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listCollectionIds<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_ListCollectionIdsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListCollectionIdsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listCollectionIds(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_ListCollectionIdsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_ListCollectionIdsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BatchWrite" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Applies a batch of write operations.
    /// > 
    /// > The BatchWrite method does not apply the write operations atomically
    /// > and can apply them out of order. Method does not allow more than one write
    /// > per document. Each write succeeds or fails independently. See the
    /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
    /// > success status of each write.
    /// > 
    /// > If you require an atomically applied set of writes, use
    /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_BatchWriteRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func batchWrite<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_BatchWriteRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BatchWriteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.batchWrite(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_BatchWriteRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_BatchWriteResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new document.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Firestore_V1_CreateDocumentRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDocument<Result>(
        request: GRPCCore.ClientRequest<Google_Firestore_V1_CreateDocumentRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.createDocument(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Firestore_V1_CreateDocumentRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Firestore_V1_Document>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Firestore_V1_Firestore.ClientProtocol {
    /// Call the "GetDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets a single document.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getDocument<Result>(
        _ message: Google_Firestore_V1_GetDocumentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_GetDocumentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getDocument(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListDocuments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists documents.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listDocuments<Result>(
        _ message: Google_Firestore_V1_ListDocumentsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListDocumentsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_ListDocumentsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listDocuments(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "UpdateDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Updates or inserts a document.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func updateDocument<Result>(
        _ message: Google_Firestore_V1_UpdateDocumentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_UpdateDocumentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.updateDocument(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a document.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteDocument<Result>(
        _ message: Google_Firestore_V1_DeleteDocumentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_DeleteDocumentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteDocument(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BatchGetDocuments" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets multiple documents.
    /// > 
    /// > Documents returned by this method are not guaranteed to be returned in the
    /// > same order that they were requested.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func batchGetDocuments<Result>(
        _ message: Google_Firestore_V1_BatchGetDocumentsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_BatchGetDocumentsResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_BatchGetDocumentsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchGetDocuments(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BeginTransaction" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts a new transaction.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func beginTransaction<Result>(
        _ message: Google_Firestore_V1_BeginTransactionRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BeginTransactionResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_BeginTransactionRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.beginTransaction(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Commit" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Commits a transaction, while optionally updating documents.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func commit<Result>(
        _ message: Google_Firestore_V1_CommitRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_CommitResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_CommitRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.commit(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Rollback" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Rolls back a transaction.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func rollback<Result>(
        _ message: Google_Firestore_V1_RollbackRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_RollbackRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.rollback(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Runs a query.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runQuery<Result>(
        _ message: Google_Firestore_V1_RunQueryRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunQueryResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_RunQueryRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.runQuery(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "RunAggregationQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Runs an aggregation query.
    /// > 
    /// > Rather than producing [Document][google.firestore.v1.Document] results like
    /// > [Firestore.RunQuery][google.firestore.v1.Firestore.RunQuery], this API
    /// > allows running an aggregation to produce a series of
    /// > [AggregationResult][google.firestore.v1.AggregationResult] server-side.
    /// > 
    /// > High-Level Example:
    /// > 
    /// > ```
    /// > -- Return the number of documents in table given a filter.
    /// > SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
    /// > ```
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func runAggregationQuery<Result>(
        _ message: Google_Firestore_V1_RunAggregationQueryRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_RunAggregationQueryResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_RunAggregationQueryRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.runAggregationQuery(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "PartitionQuery" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Partitions a query by returning partition cursors that can be used to run
    /// > the query in parallel. The returned partition cursors are split points that
    /// > can be used by RunQuery as starting/end points for the query results.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func partitionQuery<Result>(
        _ message: Google_Firestore_V1_PartitionQueryRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_PartitionQueryResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_PartitionQueryRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.partitionQuery(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Write" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Streams batches of document updates and deletes, in order. This method is
    /// > only available via gRPC or WebChannel (not REST).
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func write<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Google_Firestore_V1_WriteRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_WriteResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Google_Firestore_V1_WriteRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.write(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "Listen" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Listens to changes. This method is only available via gRPC or WebChannel
    /// > (not REST).
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listen<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Google_Firestore_V1_ListenRequest>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Google_Firestore_V1_ListenResponse>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Google_Firestore_V1_ListenRequest>(
            metadata: metadata,
            producer: producer
        )
        return try await self.listen(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "ListCollectionIds" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists all the collection IDs underneath a document.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listCollectionIds<Result>(
        _ message: Google_Firestore_V1_ListCollectionIdsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_ListCollectionIdsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_ListCollectionIdsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listCollectionIds(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "BatchWrite" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Applies a batch of write operations.
    /// > 
    /// > The BatchWrite method does not apply the write operations atomically
    /// > and can apply them out of order. Method does not allow more than one write
    /// > per document. Each write succeeds or fails independently. See the
    /// > [BatchWriteResponse][google.firestore.v1.BatchWriteResponse] for the
    /// > success status of each write.
    /// > 
    /// > If you require an atomically applied set of writes, use
    /// > [Commit][google.firestore.v1.Firestore.Commit] instead.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func batchWrite<Result>(
        _ message: Google_Firestore_V1_BatchWriteRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_BatchWriteResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_BatchWriteRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.batchWrite(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CreateDocument" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Creates a new document.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func createDocument<Result>(
        _ message: Google_Firestore_V1_CreateDocumentRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Firestore_V1_Document>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Firestore_V1_CreateDocumentRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.createDocument(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}