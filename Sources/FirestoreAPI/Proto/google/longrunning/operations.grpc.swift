// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: google/longrunning/operations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - google.longrunning.Operations

/// Namespace containing generated types for the "google.longrunning.Operations" service.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
public enum Google_Longrunning_Operations {
    /// Service descriptor for the "google.longrunning.Operations" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "ListOperations" metadata.
        public enum ListOperations {
            /// Request type for "ListOperations".
            public typealias Input = Google_Longrunning_ListOperationsRequest
            /// Response type for "ListOperations".
            public typealias Output = Google_Longrunning_ListOperationsResponse
            /// Descriptor for "ListOperations".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations"),
                method: "ListOperations"
            )
        }
        /// Namespace for "GetOperation" metadata.
        public enum GetOperation {
            /// Request type for "GetOperation".
            public typealias Input = Google_Longrunning_GetOperationRequest
            /// Response type for "GetOperation".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "GetOperation".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations"),
                method: "GetOperation"
            )
        }
        /// Namespace for "DeleteOperation" metadata.
        public enum DeleteOperation {
            /// Request type for "DeleteOperation".
            public typealias Input = Google_Longrunning_DeleteOperationRequest
            /// Response type for "DeleteOperation".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "DeleteOperation".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations"),
                method: "DeleteOperation"
            )
        }
        /// Namespace for "CancelOperation" metadata.
        public enum CancelOperation {
            /// Request type for "CancelOperation".
            public typealias Input = Google_Longrunning_CancelOperationRequest
            /// Response type for "CancelOperation".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "CancelOperation".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations"),
                method: "CancelOperation"
            )
        }
        /// Namespace for "WaitOperation" metadata.
        public enum WaitOperation {
            /// Request type for "WaitOperation".
            public typealias Input = Google_Longrunning_WaitOperationRequest
            /// Response type for "WaitOperation".
            public typealias Output = Google_Longrunning_Operation
            /// Descriptor for "WaitOperation".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations"),
                method: "WaitOperation"
            )
        }
        /// Descriptors for all methods in the "google.longrunning.Operations" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            ListOperations.descriptor,
            GetOperation.descriptor,
            DeleteOperation.descriptor,
            CancelOperation.descriptor,
            WaitOperation.descriptor
        ]
    }
}

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "google.longrunning.Operations" service.
    public static let google_longrunning_Operations = GRPCCore.ServiceDescriptor(fullyQualifiedService: "google.longrunning.Operations")
}

// MARK: google.longrunning.Operations (server)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations {
    /// Streaming variant of the service protocol for the "google.longrunning.Operations" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Manages long-running operations with an API service.
    /// > 
    /// > When an API method normally takes long time to complete, it can be designed
    /// > to return [Operation][google.longrunning.Operation] to the client, and the
    /// > client can use this interface to receive the real response asynchronously by
    /// > polling the operation resource, or pass the operation resource to another API
    /// > (such as Pub/Sub API) to receive the response.  Any API service that returns
    /// > long-running operations should implement the `Operations` interface so
    /// > developers can have a consistent client experience.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "ListOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists operations that match the specified filter in the request. If the
        /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Longrunning_ListOperationsRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Longrunning_ListOperationsResponse` messages.
        func listOperations(
            request: GRPCCore.StreamingServerRequest<Google_Longrunning_ListOperationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Longrunning_ListOperationsResponse>

        /// Handle the "GetOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the latest state of a long-running operation.  Clients can use this
        /// > method to poll the operation result at intervals as recommended by the API
        /// > service.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Longrunning_GetOperationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Longrunning_Operation` messages.
        func getOperation(
            request: GRPCCore.StreamingServerRequest<Google_Longrunning_GetOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Longrunning_Operation>

        /// Handle the "DeleteOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a long-running operation. This method indicates that the client is
        /// > no longer interested in the operation result. It does not cancel the
        /// > operation. If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Longrunning_DeleteOperationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func deleteOperation(
            request: GRPCCore.StreamingServerRequest<Google_Longrunning_DeleteOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "CancelOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts asynchronous cancellation on a long-running operation.  The server
        /// > makes a best effort to cancel the operation, but success is not
        /// > guaranteed.  If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
        /// > other methods to check whether the cancellation succeeded or whether the
        /// > operation completed despite cancellation. On successful cancellation,
        /// > the operation is not deleted; instead, it becomes an operation with
        /// > an [Operation.error][google.longrunning.Operation.error] value with a
        /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
        /// > `Code.CANCELLED`.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Longrunning_CancelOperationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func cancelOperation(
            request: GRPCCore.StreamingServerRequest<Google_Longrunning_CancelOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "WaitOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Waits until the specified long-running operation is done or reaches at most
        /// > a specified timeout, returning the latest state.  If the operation is
        /// > already done, the latest state is immediately returned.  If the timeout
        /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
        /// > timeout is used.  If the server does not support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        /// > Note that this method is on a best-effort basis.  It may return the latest
        /// > state before the specified timeout (including immediately), meaning even an
        /// > immediate response is no guarantee that the operation is done.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Google_Longrunning_WaitOperationRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Google_Longrunning_Operation` messages.
        func waitOperation(
            request: GRPCCore.StreamingServerRequest<Google_Longrunning_WaitOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Google_Longrunning_Operation>
    }

    /// Service protocol for the "google.longrunning.Operations" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Manages long-running operations with an API service.
    /// > 
    /// > When an API method normally takes long time to complete, it can be designed
    /// > to return [Operation][google.longrunning.Operation] to the client, and the
    /// > client can use this interface to receive the real response asynchronously by
    /// > polling the operation resource, or pass the operation resource to another API
    /// > (such as Pub/Sub API) to receive the response.  Any API service that returns
    /// > long-running operations should implement the `Operations` interface so
    /// > developers can have a consistent client experience.
    public protocol ServiceProtocol: Google_Longrunning_Operations.StreamingServiceProtocol {
        /// Handle the "ListOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists operations that match the specified filter in the request. If the
        /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_ListOperationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Longrunning_ListOperationsResponse` message.
        func listOperations(
            request: GRPCCore.ServerRequest<Google_Longrunning_ListOperationsRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Longrunning_ListOperationsResponse>

        /// Handle the "GetOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the latest state of a long-running operation.  Clients can use this
        /// > method to poll the operation result at intervals as recommended by the API
        /// > service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_GetOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Longrunning_Operation` message.
        func getOperation(
            request: GRPCCore.ServerRequest<Google_Longrunning_GetOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Longrunning_Operation>

        /// Handle the "DeleteOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a long-running operation. This method indicates that the client is
        /// > no longer interested in the operation result. It does not cancel the
        /// > operation. If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_DeleteOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func deleteOperation(
            request: GRPCCore.ServerRequest<Google_Longrunning_DeleteOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "CancelOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts asynchronous cancellation on a long-running operation.  The server
        /// > makes a best effort to cancel the operation, but success is not
        /// > guaranteed.  If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
        /// > other methods to check whether the cancellation succeeded or whether the
        /// > operation completed despite cancellation. On successful cancellation,
        /// > the operation is not deleted; instead, it becomes an operation with
        /// > an [Operation.error][google.longrunning.Operation.error] value with a
        /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
        /// > `Code.CANCELLED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_CancelOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func cancelOperation(
            request: GRPCCore.ServerRequest<Google_Longrunning_CancelOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>

        /// Handle the "WaitOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Waits until the specified long-running operation is done or reaches at most
        /// > a specified timeout, returning the latest state.  If the operation is
        /// > already done, the latest state is immediately returned.  If the timeout
        /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
        /// > timeout is used.  If the server does not support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        /// > Note that this method is on a best-effort basis.  It may return the latest
        /// > state before the specified timeout (including immediately), meaning even an
        /// > immediate response is no guarantee that the operation is done.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_WaitOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Google_Longrunning_Operation` message.
        func waitOperation(
            request: GRPCCore.ServerRequest<Google_Longrunning_WaitOperationRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Google_Longrunning_Operation>
    }

    /// Simple service protocol for the "google.longrunning.Operations" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Manages long-running operations with an API service.
    /// > 
    /// > When an API method normally takes long time to complete, it can be designed
    /// > to return [Operation][google.longrunning.Operation] to the client, and the
    /// > client can use this interface to receive the real response asynchronously by
    /// > polling the operation resource, or pass the operation resource to another API
    /// > (such as Pub/Sub API) to receive the response.  Any API service that returns
    /// > long-running operations should implement the `Operations` interface so
    /// > developers can have a consistent client experience.
    public protocol SimpleServiceProtocol: Google_Longrunning_Operations.ServiceProtocol {
        /// Handle the "ListOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists operations that match the specified filter in the request. If the
        /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A `Google_Longrunning_ListOperationsRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Longrunning_ListOperationsResponse` to respond with.
        func listOperations(
            request: Google_Longrunning_ListOperationsRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Longrunning_ListOperationsResponse

        /// Handle the "GetOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the latest state of a long-running operation.  Clients can use this
        /// > method to poll the operation result at intervals as recommended by the API
        /// > service.
        ///
        /// - Parameters:
        ///   - request: A `Google_Longrunning_GetOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Longrunning_Operation` to respond with.
        func getOperation(
            request: Google_Longrunning_GetOperationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Longrunning_Operation

        /// Handle the "DeleteOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a long-running operation. This method indicates that the client is
        /// > no longer interested in the operation result. It does not cancel the
        /// > operation. If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A `Google_Longrunning_DeleteOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func deleteOperation(
            request: Google_Longrunning_DeleteOperationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "CancelOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts asynchronous cancellation on a long-running operation.  The server
        /// > makes a best effort to cancel the operation, but success is not
        /// > guaranteed.  If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
        /// > other methods to check whether the cancellation succeeded or whether the
        /// > operation completed despite cancellation. On successful cancellation,
        /// > the operation is not deleted; instead, it becomes an operation with
        /// > an [Operation.error][google.longrunning.Operation.error] value with a
        /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
        /// > `Code.CANCELLED`.
        ///
        /// - Parameters:
        ///   - request: A `Google_Longrunning_CancelOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func cancelOperation(
            request: Google_Longrunning_CancelOperationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

        /// Handle the "WaitOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Waits until the specified long-running operation is done or reaches at most
        /// > a specified timeout, returning the latest state.  If the operation is
        /// > already done, the latest state is immediately returned.  If the timeout
        /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
        /// > timeout is used.  If the server does not support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        /// > Note that this method is on a best-effort basis.  It may return the latest
        /// > state before the specified timeout (including immediately), meaning even an
        /// > immediate response is no guarantee that the operation is done.
        ///
        /// - Parameters:
        ///   - request: A `Google_Longrunning_WaitOperationRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Google_Longrunning_Operation` to respond with.
        func waitOperation(
            request: Google_Longrunning_WaitOperationRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Google_Longrunning_Operation
    }
}

// Default implementation of 'registerMethods(with:)'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Google_Longrunning_Operations.Method.ListOperations.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_ListOperationsRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_ListOperationsResponse>(),
            handler: { request, context in
                try await self.listOperations(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Longrunning_Operations.Method.GetOperation.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_GetOperationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_Operation>(),
            handler: { request, context in
                try await self.getOperation(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Longrunning_Operations.Method.DeleteOperation.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_DeleteOperationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.deleteOperation(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Longrunning_Operations.Method.CancelOperation.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_CancelOperationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.cancelOperation(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Google_Longrunning_Operations.Method.WaitOperation.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_WaitOperationRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_Operation>(),
            handler: { request, context in
                try await self.waitOperation(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.ServiceProtocol {
    public func listOperations(
        request: GRPCCore.StreamingServerRequest<Google_Longrunning_ListOperationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Longrunning_ListOperationsResponse> {
        let response = try await self.listOperations(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func getOperation(
        request: GRPCCore.StreamingServerRequest<Google_Longrunning_GetOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Longrunning_Operation> {
        let response = try await self.getOperation(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func deleteOperation(
        request: GRPCCore.StreamingServerRequest<Google_Longrunning_DeleteOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.deleteOperation(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func cancelOperation(
        request: GRPCCore.StreamingServerRequest<Google_Longrunning_CancelOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.cancelOperation(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func waitOperation(
        request: GRPCCore.StreamingServerRequest<Google_Longrunning_WaitOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Google_Longrunning_Operation> {
        let response = try await self.waitOperation(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.SimpleServiceProtocol {
    public func listOperations(
        request: GRPCCore.ServerRequest<Google_Longrunning_ListOperationsRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Longrunning_ListOperationsResponse> {
        return GRPCCore.ServerResponse<Google_Longrunning_ListOperationsResponse>(
            message: try await self.listOperations(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func getOperation(
        request: GRPCCore.ServerRequest<Google_Longrunning_GetOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Longrunning_Operation> {
        return GRPCCore.ServerResponse<Google_Longrunning_Operation>(
            message: try await self.getOperation(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func deleteOperation(
        request: GRPCCore.ServerRequest<Google_Longrunning_DeleteOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.deleteOperation(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func cancelOperation(
        request: GRPCCore.ServerRequest<Google_Longrunning_CancelOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.cancelOperation(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func waitOperation(
        request: GRPCCore.ServerRequest<Google_Longrunning_WaitOperationRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Google_Longrunning_Operation> {
        return GRPCCore.ServerResponse<Google_Longrunning_Operation>(
            message: try await self.waitOperation(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: google.longrunning.Operations (client)

@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations {
    /// Generated client protocol for the "google.longrunning.Operations" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Manages long-running operations with an API service.
    /// > 
    /// > When an API method normally takes long time to complete, it can be designed
    /// > to return [Operation][google.longrunning.Operation] to the client, and the
    /// > client can use this interface to receive the real response asynchronously by
    /// > polling the operation resource, or pass the operation resource to another API
    /// > (such as Pub/Sub API) to receive the response.  Any API service that returns
    /// > long-running operations should implement the `Operations` interface so
    /// > developers can have a consistent client experience.
    public protocol ClientProtocol: Sendable {
        /// Call the "ListOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists operations that match the specified filter in the request. If the
        /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_ListOperationsRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_ListOperationsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_ListOperationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func listOperations<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_ListOperationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_ListOperationsResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the latest state of a long-running operation.  Clients can use this
        /// > method to poll the operation result at intervals as recommended by the API
        /// > service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_GetOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_GetOperationRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_GetOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "DeleteOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a long-running operation. This method indicates that the client is
        /// > no longer interested in the operation result. It does not cancel the
        /// > operation. If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_DeleteOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_DeleteOperationRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func deleteOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_DeleteOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "CancelOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts asynchronous cancellation on a long-running operation.  The server
        /// > makes a best effort to cancel the operation, but success is not
        /// > guaranteed.  If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
        /// > other methods to check whether the cancellation succeeded or whether the
        /// > operation completed despite cancellation. On successful cancellation,
        /// > the operation is not deleted; instead, it becomes an operation with
        /// > an [Operation.error][google.longrunning.Operation.error] value with a
        /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
        /// > `Code.CANCELLED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_CancelOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_CancelOperationRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func cancelOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_CancelOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "WaitOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Waits until the specified long-running operation is done or reaches at most
        /// > a specified timeout, returning the latest state.  If the operation is
        /// > already done, the latest state is immediately returned.  If the timeout
        /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
        /// > timeout is used.  If the server does not support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        /// > Note that this method is on a best-effort basis.  It may return the latest
        /// > state before the specified timeout (including immediately), meaning even an
        /// > immediate response is no guarantee that the operation is done.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_WaitOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_WaitOperationRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func waitOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_WaitOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "google.longrunning.Operations" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Manages long-running operations with an API service.
    /// > 
    /// > When an API method normally takes long time to complete, it can be designed
    /// > to return [Operation][google.longrunning.Operation] to the client, and the
    /// > client can use this interface to receive the real response asynchronously by
    /// > polling the operation resource, or pass the operation resource to another API
    /// > (such as Pub/Sub API) to receive the response.  Any API service that returns
    /// > long-running operations should implement the `Operations` interface so
    /// > developers can have a consistent client experience.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "ListOperations" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Lists operations that match the specified filter in the request. If the
        /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_ListOperationsRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_ListOperationsRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_ListOperationsResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func listOperations<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_ListOperationsRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_ListOperationsResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Longrunning_Operations.Method.ListOperations.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Gets the latest state of a long-running operation.  Clients can use this
        /// > method to poll the operation result at intervals as recommended by the API
        /// > service.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_GetOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_GetOperationRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_GetOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Longrunning_Operations.Method.GetOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "DeleteOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Deletes a long-running operation. This method indicates that the client is
        /// > no longer interested in the operation result. It does not cancel the
        /// > operation. If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_DeleteOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_DeleteOperationRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func deleteOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_DeleteOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Longrunning_Operations.Method.DeleteOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "CancelOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Starts asynchronous cancellation on a long-running operation.  The server
        /// > makes a best effort to cancel the operation, but success is not
        /// > guaranteed.  If the server doesn't support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
        /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
        /// > other methods to check whether the cancellation succeeded or whether the
        /// > operation completed despite cancellation. On successful cancellation,
        /// > the operation is not deleted; instead, it becomes an operation with
        /// > an [Operation.error][google.longrunning.Operation.error] value with a
        /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
        /// > `Code.CANCELLED`.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_CancelOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_CancelOperationRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func cancelOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_CancelOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Longrunning_Operations.Method.CancelOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "WaitOperation" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Waits until the specified long-running operation is done or reaches at most
        /// > a specified timeout, returning the latest state.  If the operation is
        /// > already done, the latest state is immediately returned.  If the timeout
        /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
        /// > timeout is used.  If the server does not support this method, it returns
        /// > `google.rpc.Code.UNIMPLEMENTED`.
        /// > Note that this method is on a best-effort basis.  It may return the latest
        /// > state before the specified timeout (including immediately), meaning even an
        /// > immediate response is no guarantee that the operation is done.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Google_Longrunning_WaitOperationRequest` message.
        ///   - serializer: A serializer for `Google_Longrunning_WaitOperationRequest` messages.
        ///   - deserializer: A deserializer for `Google_Longrunning_Operation` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func waitOperation<Result>(
            request: GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>,
            serializer: some GRPCCore.MessageSerializer<Google_Longrunning_WaitOperationRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Google_Longrunning_Operation>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Google_Longrunning_Operations.Method.WaitOperation.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.ClientProtocol {
    /// Call the "ListOperations" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists operations that match the specified filter in the request. If the
    /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Longrunning_ListOperationsRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listOperations<Result>(
        request: GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.listOperations(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_ListOperationsRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_ListOperationsResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the latest state of a long-running operation.  Clients can use this
    /// > method to poll the operation result at intervals as recommended by the API
    /// > service.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Longrunning_GetOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getOperation<Result>(
        request: GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_GetOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a long-running operation. This method indicates that the client is
    /// > no longer interested in the operation result. It does not cancel the
    /// > operation. If the server doesn't support this method, it returns
    /// > `google.rpc.Code.UNIMPLEMENTED`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Longrunning_DeleteOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteOperation<Result>(
        request: GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.deleteOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_DeleteOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CancelOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts asynchronous cancellation on a long-running operation.  The server
    /// > makes a best effort to cancel the operation, but success is not
    /// > guaranteed.  If the server doesn't support this method, it returns
    /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
    /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
    /// > other methods to check whether the cancellation succeeded or whether the
    /// > operation completed despite cancellation. On successful cancellation,
    /// > the operation is not deleted; instead, it becomes an operation with
    /// > an [Operation.error][google.longrunning.Operation.error] value with a
    /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
    /// > `Code.CANCELLED`.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Longrunning_CancelOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelOperation<Result>(
        request: GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.cancelOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_CancelOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WaitOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Waits until the specified long-running operation is done or reaches at most
    /// > a specified timeout, returning the latest state.  If the operation is
    /// > already done, the latest state is immediately returned.  If the timeout
    /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
    /// > timeout is used.  If the server does not support this method, it returns
    /// > `google.rpc.Code.UNIMPLEMENTED`.
    /// > Note that this method is on a best-effort basis.  It may return the latest
    /// > state before the specified timeout (including immediately), meaning even an
    /// > immediate response is no guarantee that the operation is done.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Google_Longrunning_WaitOperationRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func waitOperation<Result>(
        request: GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.waitOperation(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Google_Longrunning_WaitOperationRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Google_Longrunning_Operation>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
@available(macOS 15.0, iOS 18.0, watchOS 11.0, tvOS 18.0, visionOS 2.0, *)
extension Google_Longrunning_Operations.ClientProtocol {
    /// Call the "ListOperations" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Lists operations that match the specified filter in the request. If the
    /// > server doesn't support this method, it returns `UNIMPLEMENTED`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func listOperations<Result>(
        _ message: Google_Longrunning_ListOperationsRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_ListOperationsResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_ListOperationsRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.listOperations(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Gets the latest state of a long-running operation.  Clients can use this
    /// > method to poll the operation result at intervals as recommended by the API
    /// > service.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getOperation<Result>(
        _ message: Google_Longrunning_GetOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_GetOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "DeleteOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Deletes a long-running operation. This method indicates that the client is
    /// > no longer interested in the operation result. It does not cancel the
    /// > operation. If the server doesn't support this method, it returns
    /// > `google.rpc.Code.UNIMPLEMENTED`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func deleteOperation<Result>(
        _ message: Google_Longrunning_DeleteOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_DeleteOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.deleteOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "CancelOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Starts asynchronous cancellation on a long-running operation.  The server
    /// > makes a best effort to cancel the operation, but success is not
    /// > guaranteed.  If the server doesn't support this method, it returns
    /// > `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
    /// > [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
    /// > other methods to check whether the cancellation succeeded or whether the
    /// > operation completed despite cancellation. On successful cancellation,
    /// > the operation is not deleted; instead, it becomes an operation with
    /// > an [Operation.error][google.longrunning.Operation.error] value with a
    /// > [google.rpc.Status.code][google.rpc.Status.code] of `1`, corresponding to
    /// > `Code.CANCELLED`.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func cancelOperation<Result>(
        _ message: Google_Longrunning_CancelOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_CancelOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.cancelOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "WaitOperation" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Waits until the specified long-running operation is done or reaches at most
    /// > a specified timeout, returning the latest state.  If the operation is
    /// > already done, the latest state is immediately returned.  If the timeout
    /// > specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
    /// > timeout is used.  If the server does not support this method, it returns
    /// > `google.rpc.Code.UNIMPLEMENTED`.
    /// > Note that this method is on a best-effort basis.  It may return the latest
    /// > state before the specified timeout (including immediately), meaning even an
    /// > immediate response is no guarantee that the operation is done.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func waitOperation<Result>(
        _ message: Google_Longrunning_WaitOperationRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Google_Longrunning_Operation>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Google_Longrunning_WaitOperationRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.waitOperation(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}